// Cells with padding left/right
@mixin _helpers-grid-h-spaces($gap, $size, $mod: '') {
  &--#{$mod}hspaces-#{$gap} {
    margin-left: -($size / 2);
    margin-right: -($size / 2);

    > * {
      padding-left: ($size / 2);
      padding-right: ($size / 2);
    }
  }
}

// Cells with margin bottom
@mixin _helpers-grid-v-space($gap, $size, $mod: '') {
  &--#{$mod}vspace-#{$gap} {
    margin-bottom: -$size;

    > * {
      margin-bottom: $size;
    }
  }
}

// Cells with padding left/right and margin-bottom
@mixin _helpers-grid-spaces($gap, $size, $mod: '') {
  &--#{$mod}spaces-#{$gap} {
    margin-left: -($size / 2);
    margin-right: -($size / 2);
    margin-bottom: -($size);

    > * {
      padding-left: ($size / 2);
      padding-right: ($size / 2);
      margin-bottom: $size;
    }
  }
}

// Flex grid
// @require {mixin} media
// @param {Size} $columns [12] - Columns count
// @param {Map} $points [()] - map of breakpoints to make helpers to
// @param {Map} $gutters [()] - map of gutters to make helpers to
@mixin helpers-grid($columns: 12, $points: (), $gutters: ()) {
  // Grid container
  .grid {
    display: flex;
    flex-wrap: wrap;
    list-style: none;
    padding: 0;
    margin: 0;

    // Gutters
    // Generates grid spacing classes
    // When class adds padding or margin to cell, it adds corresponding negative margin on grid
    @each $gap, $value in $gutters {
      // Cells with padding left/right
      @include _helpers-grid-h-spaces($gap, $value);

      // Cells with margin bottom
      @include _helpers-grid-v-space($gap, $value);

      // Cells with padding left/right and margin-bottom
      @include _helpers-grid-spaces($gap, $value);

      @each $point, $size in $points {
        @include media($size) {
          // Cells with padding left/right
          @include _helpers-grid-h-spaces($gap, $value, $point);

          // Cells with margin bottom
          @include _helpers-grid-v-space($gap, $value, $point);

          // Cells with padding left/right and margin-bottom
          @include _helpers-grid-spaces($gap, $value, $point);
        }
      }
    }

    // Grid with predefined cell's width
    //@for $i from 1 through $columns {
    //  $width: percentage($columns / $i / $columns);
    //
    //  &--#{$i} {
    //    & > * {
    //      @include flex-cell-width($width);
    //    }
    //  }
    //
    //  @each $point, $size in $points {
    //    @include media($size) {
    //      &--#{$point}-#{$i} {
    //        & > * {
    //          @include flex-cell-width($width);
    //        }
    //      }
    //    }
    //  }
    //}

    // Grid with auto cell's width
    //&--auto {
    //  & > * {
    //    @include flex-cell-width(auto);
    //    min-width: 1px; // IE11 fix
    //  }
    //}

    //@each $point, $size in $points {
    //  @include media($size) {
    //    &--#{$point}-auto {
    //      & > * {
    //        @include flex-cell-width(auto);
    //
    //        min-width: 1px; // IE11 fix
    //      }
    //    }
    //  }
    //}
  }

  .cell {
    min-width: 0;
    min-height: 1px;

    // Cells with auto width
    &--auto {
      @include flex-cell-width(auto);
      min-width: 1px; // IE11 fix
    }

    @each $point, $size in $points {
      @include media($size) {
        &--#{$point}-auto {
          @include flex-cell-width(auto);
          min-width: 1px; // IE11 fix
        }
      }
    }

    // Cells with percentage width
    @for $i from 1 through $columns {
      $width: percentage($i / $columns);

      &--#{$i} {
        @include flex-cell-width($width);
      }
    }

    @each $point, $size in $points {
      @include media($size) {
        @for $i from 1 through $columns {
          $width: percentage($i / $columns);

          &--#{$point}-#{$i} {
            @include flex-cell-width($width);
          }
        }
      }
    }
  }
}
